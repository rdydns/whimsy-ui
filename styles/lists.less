.list-group,
.list-tree {
  li:not(.list-nested-item),
  li.list-nested-item > .list-item {
    .text(normal);
  }

  .generate-list-item-text-color(@class) {
    li:not(.list-nested-item).text-@{class},
    li.list-nested-item.text-@{class} > .list-item {
      .text(@class);
    }
  }
  .generate-list-item-text-color(subtle);
  .generate-list-item-text-color(info);
  .generate-list-item-text-color(success);
  .generate-list-item-text-color(warning);
  .generate-list-item-text-color(error);
  .generate-list-item-text-color(selected);

  .generate-list-item-status-color(@color, @status) {
    li:not(.list-nested-item).status-@{status},
    li.list-nested-item.status-@{status} > .list-item {
      color: @color;
    }

    li:not(.list-nested-item).selected.status-@{status},
    li.list-nested-item.selected.status-@{status} > .list-item {
      color: @color;
    }
  }

  .generate-list-item-status-color(@text-color-success, added);
  .generate-list-item-status-color(@text-color-subtle, ignored);
  .generate-list-item-status-color(@text-color-warning, modified);
  .generate-list-item-status-color(@text-color-error, removed);
  .generate-list-item-status-color(@text-color-info, renamed);

  li:not(.list-nested-item).selected,
  li.list-nested-item.selected > .list-item {
    .text(selected);
  }

  .no-icon {
    padding-left: @component-icon-size;
  }
}

.list-tree .selected:before {
  background-color: @base-background-color;
}

.select-list.popover-list {
  background-color: @overlay-background-color;
  padding: @component-padding;
  border-radius: @component-border-radius;

  atom-text-editor[mini] {
    margin-bottom: @component-padding;
  }

  ol.list-group {
    margin-top: @component-padding;
  }

  .list-group li {
    padding-left: @component-padding;
  }
}
